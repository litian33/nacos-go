// Code generated by MockGen. DO NOT EDIT.
// Source: nacos-go/common/http_agent (interfaces: IHttpAgent)

// Package http_agent is a generated GoMock package.
package http_agent

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockIHttpAgent is a mock of IHttpAgent interface
type MockIHttpAgent struct {
	ctrl     *gomock.Controller
	recorder *MockIHttpAgentMockRecorder
}

// MockIHttpAgentMockRecorder is the mock recorder for MockIHttpAgent
type MockIHttpAgentMockRecorder struct {
	mock *MockIHttpAgent
}

// NewMockIHttpAgent creates a new mock instance
func NewMockIHttpAgent(ctrl *gomock.Controller) *MockIHttpAgent {
	mock := &MockIHttpAgent{ctrl: ctrl}
	mock.recorder = &MockIHttpAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIHttpAgent) EXPECT() *MockIHttpAgentMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockIHttpAgent) Delete(arg0 string, arg1 http.Header, arg2 uint64) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockIHttpAgentMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIHttpAgent)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockIHttpAgent) Get(arg0 string, arg1 http.Header, arg2 uint64) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIHttpAgentMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIHttpAgent)(nil).Get), arg0, arg1, arg2)
}

// Post mocks base method
func (m *MockIHttpAgent) Post(arg0 string, arg1 http.Header, arg2 uint64, arg3 map[string]string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockIHttpAgentMockRecorder) Post(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIHttpAgent)(nil).Post), arg0, arg1, arg2, arg3)
}

// Put mocks base method
func (m *MockIHttpAgent) Put(arg0 string, arg1 http.Header, arg2 uint64, arg3 map[string]string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockIHttpAgentMockRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIHttpAgent)(nil).Put), arg0, arg1, arg2, arg3)
}
